use eframe::egui::{Context, FontFamily};
use eframe::epaint::text::{FontData, FontDefinitions};
use std::io::Read;
use std::sync::Arc;

// Generated by build.rs: [("StemName", &[u8 .br]), ...]
include!(concat!(env!("OUT_DIR"), "/fonts_gen.rs"));

#[inline]
fn br_to_ttf_vec(br: &[u8]) -> Vec<u8> {
    use brotli_decompressor::Decompressor;
    let mut out = Vec::new();
    let mut rd = Decompressor::new(br, 4096);
    rd.read_to_end(&mut out)
        .expect("brotli decompress");
    out
}

#[inline]
fn insert_owned(defs: &mut FontDefinitions, key: &str, br: &[u8]) {
    defs.font_data
        .insert(key.to_string(), Arc::from(FontData::from_owned(br_to_ttf_vec(br))));
}

fn push_front_unique(defs: &mut FontDefinitions, family: FontFamily, name: &str) {
    if !defs.font_data.contains_key(name) {
        return;
    }
    let list = defs
        .families
        .get_mut(&family)
        .expect("family");
    if let Some(pos) = list.iter().position(|s| s == name) {
        list.remove(pos);
    }
    list.insert(0, name.to_string());
}

/// Insert a font key to **both** families (`Proportional` and `Monospace`).
/// Safe: if the font is not present in `font_data`, nothing happens.
fn push_front_both(defs: &mut FontDefinitions, name: &str) {
    push_front_unique(defs, FontFamily::Proportional, name);
    push_front_unique(defs, FontFamily::Monospace, name);
}

/// Install bundled fonts (Regular-only) with clear fallback order.
///
/// Abbreviations:
/// - **JB** = JetBrains Mono (Latin/Cyrillic; our primary font)
/// - **TC** = Traditional Chinese fallback (`LXGWWenKaiMonoTC-Regular`)
/// - **SC** = Simplified Chinese fallback (`LXGWWenKaiMono-Regular`)
///
/// Desired priority (highest → lowest): **JB → TC → SC**
///
/// Implementation detail:
/// `push_front_*` inserts at the **front**, so we call in reverse:
/// SC → TC → JB  ⇒ effective order is JB, then TC, then SC.
pub fn install_fonts(ctx: &Context) {
    let mut defs = FontDefinitions::default();

    // 1) Register all compressed fonts from OUT_DIR
    for (stem, br) in all_fonts_br() {
        insert_owned(&mut defs, stem, br);
    }

    // 2) Set both families in reverse priority order
    push_front_both(&mut defs, "LXGWWenKaiMono-Regular"); // SC
    push_front_both(&mut defs, "LXGWWenKaiMonoTC-Regular"); // TC
    push_front_both(&mut defs, "JetBrainsMono-Regular"); // JB

    // 3) Apply
    ctx.set_fonts(defs);
}
