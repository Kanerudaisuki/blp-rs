use eframe::egui::{self, CentralPanel, TopBottomPanel, ViewportBuilder};
use std::path::PathBuf;

pub fn run_ui(_path: Option<PathBuf>) {
    let options = eframe::NativeOptions {
        viewport: ViewportBuilder::default()
            .with_title("BLP Viewer")
            .with_inner_size([800.0, 600.0])
            .with_decorations(false), // üëà –±–µ–∑ —Ä–∞–º–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                                      // .with_transparent(true)    // üëà –µ—Å–ª–∏ –Ω–∞–¥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –æ–∫–Ω–æ
                                      // .with_always_on_top(true)  // üëà –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        ..Default::default()
    };

    eframe::run_native("blp-rs", options, Box::new(|_cc| -> Result<Box<dyn eframe::App>, _> { Ok(Box::new(App)) })).expect("failed to run eframe");
}

struct App;

impl eframe::App for App {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // –ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è "—Ç–∏—Ç—É–ª–∫–∞" –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        TopBottomPanel::top("drag_bar").show(ctx, |ui| {
            ui.horizontal(|ui| {
                ui.label("BLP Viewer");
                // –õ–ö–ú –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ ‚Äî –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
                if ui
                    .button("‚†ø")
                    .is_pointer_button_down_on()
                {
                    ctx.send_viewport_cmd(egui::ViewportCommand::StartDrag);
                }
                ui.with_layout(egui::Layout::right_to_left(egui::Align::Center), |ui| {
                    if ui.button("‚úñ").clicked() {
                        ctx.send_viewport_cmd(egui::ViewportCommand::Close);
                    }
                });
            });
        });

        CentralPanel::default().show(ctx, |ui| {
            if ui.button("üîÑ Refresh").clicked() {
                // —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ–º; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä—Å–∏–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É:
                // ctx.request_repaint();
            }
            if ui.button("‚ùå Exit").clicked() {
                ctx.send_viewport_cmd(egui::ViewportCommand::Close);
            }
        });
    }
}
